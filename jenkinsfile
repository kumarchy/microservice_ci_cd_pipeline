pipeline {
    agent any

    environment {
        MONGO_URI = credentials('MONGO_URI')
        DATABASE_URL_1 = credentials('DATABASE_URL_1')
        DATABASE_URL_3 = credentials('DATABASE_URL_3')
        JWT_SECRET = credentials('JWT_SECRET')   
        PORT_1 = credentials('PORT_1')
        PORT_2 = credentials('PORT_2')
        PORT_3 = credentials('PORT_3')
        GATEWAY_PORT = credentials('GATEWAY_PORT')
        AUTH_SERVICE_URL = credentials('AUTH_SERVICE_URL')
        PRODUCT_SERVICE_URL = credentials('PRODUCT_SERVICE_URL')
        ORDER_SERVICE_URL = credentials('ORDER_SERVICE_URL')
    }

    stages {
        stage('Install Dependencies') {
            steps {
                sh '''
                    # Install NodeJS and NPM
                    echo "Installing Node.js and npm..."
                    apt-get update
                    apt-get install -y curl
                    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
                    apt-get install -y nodejs
                    node -v
                    npm -v
                    
                    # Install Docker & Docker Compose if not present
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        apt-get install -y apt-transport-https ca-certificates gnupg lsb-release
                        curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
                        apt-get update
                        apt-get install -y docker-ce docker-ce-cli containerd.io
                    fi
                    
                    # Install Docker Compose V2
                    if ! command -v docker-compose &> /dev/null; then
                        echo "Installing Docker Compose..."
                        apt-get install -y docker-compose-plugin
                        ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose || true
                    fi
                    
                    # Check versions
                    docker --version || true
                    docker-compose --version || true
                '''
            }
        }
        
        stage('Clone Code'){
            steps {
                checkout scm
            }
        }
        
        stage('Install npm Packages'){
            steps {
                dir('client'){
                    sh 'npm install'
                }
                
                dir('auth-service'){
                    sh 'npm install'
                }
                
                dir('product-service'){
                    sh 'npm install'
                }

                dir('order-service'){
                    sh 'npm install'
                }

                dir('gateway'){
                    sh 'npm install'
                }
            }
        }
        
        stage('Prepare Environment'){
            steps {
                // Create .env files
                sh """
                # Auth Service .env
                echo "PORT=${PORT_1}" > auth-service/.env
                echo "JWT_SECRET=${JWT_SECRET}" >> auth-service/.env
                echo "DATABASE_URL=${DATABASE_URL_1}" >> auth-service/.env
                
                # Product Service .env
                echo "PORT=${PORT_2}" > product-service/.env
                echo "MONGO_URI=${MONGO_URI}" >> product-service/.env
                
                # Order Service .env
                echo "PORT=${PORT_3}" > order-service/.env
                echo "DATABASE_URL=${DATABASE_URL_3}" >> order-service/.env
                
                # Gateway .env
                echo "PORT=${GATEWAY_PORT}" > gateway/.env
                echo "AUTH_SERVICE_URL=${AUTH_SERVICE_URL}" >> gateway/.env
                echo "PRODUCT_SERVICE_URL=${PRODUCT_SERVICE_URL}" >> gateway/.env
                echo "ORDER_SERVICE_URL=${ORDER_SERVICE_URL}" >> gateway/.env
                """
                
                // Debug - verify files exist
                sh 'ls -la */.'
                sh 'echo "Auth service .env content:"'
                sh 'cat auth-service/.env'
            }
        }
        
        stage('Cleanup Existing Containers') {
            steps {
                sh '''
                    # Stop and remove the mongo container if it exists
                    if docker ps -a | grep -q mongo; then
                        echo "Stopping and removing existing mongo container..."
                        docker stop mongo || true
                        docker rm mongo || true
                    fi
                    
                    # Optionally stop other related containers that might conflict
                    docker ps -a | grep -E 'gateway|auth-service|product-service|order-service' | awk '{print $1}' | xargs -r docker stop || true
                    docker ps -a | grep -E 'gateway|auth-service|product-service|order-service' | awk '{print $1}' | xargs -r docker rm || true
                
                '''
            }
        }

        stage('Build & Deploy'){
            steps {
                sh 'echo "Starting Docker Compose build and deploy..."'
                
                // Pass environment variables to docker-compose
                sh """
                MONGO_URI="${MONGO_URI}" \\
                DATABASE_URL_1="${DATABASE_URL_1}" \\
                DATABASE_URL_3="${DATABASE_URL_3}" \\
                JWT_SECRET="${JWT_SECRET}" \\
                PORT_1="${PORT_1}" \\
                PORT_2="${PORT_2}" \\
                PORT_3="${PORT_3}" \\
                GATEWAY_PORT="${GATEWAY_PORT}" \\
                AUTH_SERVICE_URL="${AUTH_SERVICE_URL}" \\
                PRODUCT_SERVICE_URL="${PRODUCT_SERVICE_URL}" \\
                ORDER_SERVICE_URL="${ORDER_SERVICE_URL}" \\
                docker-compose up -d --build
                """
                
                sh 'echo "Docker Compose deployment completed"'
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed!'
        }
    }
}