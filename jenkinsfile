pipeline {
    agent any

    stages {
        stage('Clone Code'){
            steps {
                git branch:'main', url:'https://github.com/kumarchy/microservice_ci_cd_pipeline'
            }
        }

        stage('Create Environment Files'){
            steps{
                // Debug current directory
                sh 'pwd'
                sh 'ls -la'
                
                // Create auth-service .env file
                sh '''
                mkdir -p auth-service
                cat > auth-service/.env << EOL
PORT=3001
JWT_SECRET=MICROSERVICE_JWT_SECRET
DATABASE_URL=postgresql://postgres:root@authPostgresDB:5432/authDB?schema=public
EOL
                chmod 644 auth-service/.env
                '''

                // Create product-service .env file
                sh '''
                mkdir -p product-service
                cat > product-service/.env << EOL
PORT=3002
MONGO_URI=mongodb://mongo:27017/microservices                
EOL
                chmod 644 product-service/.env
                '''

                // Create order-service .env file
                sh '''
                mkdir -p order-service
                cat > order-service/.env << EOL
PORT=3003
DATABASE_URL=postgresql://postgres:root@orderPostgresDB:5432/orderDB?schema=public
EOL
                chmod 644 order-service/.env
                '''

                // Create gateway .env file
                sh '''
                mkdir -p gateway
                cat > gateway/.env << EOL
PORT=3000
AUTH_SERVICE_URL=http://localhost:3001
PRODUCT_SERVICE_URL=http://localhost:3002
ORDER_SERVICE_URL=http://localhost:3003
EOL
                chmod 644 gateway/.env
                '''
                
                // Verify env files were created
                sh 'ls -la */.'
                sh 'cat auth-service/.env'
                sh 'cat product-service/.env'
                sh 'cat order-service/.env'
                sh 'cat gateway/.env'
            }
        }
        
        stage('Client Tests'){
            steps {
                dir('client'){
                    sh 'npm install'
                   // sh 'npm test'
                }
            }
        }
        
        stage('Server Tests'){
            steps {
                dir('auth-service'){
                    sh 'npm install'
                    // sh 'npm test'
                }

                dir('order-service'){
                    sh 'npm install'
                     // sh 'npm test'
                }

                dir('product-service'){
                    sh 'npm install'
                     // sh 'npm test'
                }
            }
        }

        stage('Build & Run Containers'){
            steps {
                // Check which docker compose command is available
                sh 'docker-compose --version || echo "docker-compose not found"'
                sh 'docker --version || echo "docker not found"'
                
                // Export MONGO_URI to environment and run docker compose
                sh '''
                export MONGO_URI=mongodb://mongo:27017/microservices
                docker-compose up -d --build || docker compose up -d --build
                '''
            }
        }
    }
}