pipeline {
    agent any

    stages {
        stage('Clone Code') {
            steps {
                git branch:'main', url:'https://github.com/kumarchy/microservice_ci_cd_pipeline'
            }
        }

        stage('Debug Environment') {
            steps {
                sh 'pwd'
                sh 'ls -la'
                sh 'mkdir -p debug-info'
                sh 'env > debug-info/env.txt'
                sh 'ls -la > debug-info/ls.txt'
                sh 'find . -type d -name "*service*" > debug-info/dirs.txt'
                sh 'cat debug-info/*'
            }
        }

        stage('Create ENV Files') {
            steps {
                // Create .env files directly in each service directory
                sh '''
                # First make sure directories exist
                mkdir -p auth-service product-service order-service gateway
                
                # Create auth-service .env file
                echo "PORT=3001" > auth-service/.env
                echo "JWT_SECRET=MICROSERVICE_JWT_SECRET" >> auth-service/.env
                echo "DATABASE_URL=postgresql://postgres:root@authPostgresDB:5432/authDB?schema=public" >> auth-service/.env
                
                # Create product-service .env file
                echo "PORT=3002" > product-service/.env
                echo "MONGO_URI=mongodb://mongo:27017/microservices" >> product-service/.env
                
                # Create order-service .env file
                echo "PORT=3003" > order-service/.env
                echo "DATABASE_URL=postgresql://postgres:root@orderPostgresDB:5432/orderDB?schema=public" >> order-service/.env
                
                # Create gateway .env file
                echo "PORT=3000" > gateway/.env
                echo "AUTH_SERVICE_URL=http://localhost:3001" >> gateway/.env
                echo "PRODUCT_SERVICE_URL=http://localhost:3002" >> gateway/.env
                echo "ORDER_SERVICE_URL=http://localhost:3003" >> gateway/.env
                
                # Verify files were created
                ls -la auth-service/
                ls -la product-service/
                ls -la order-service/
                ls -la gateway/
                
                # Display file contents
                echo "=== auth-service/.env ==="
                cat auth-service/.env
                echo "=== product-service/.env ==="
                cat product-service/.env
                echo "=== order-service/.env ==="
                cat order-service/.env
                echo "=== gateway/.env ==="
                cat gateway/.env
                '''
            }
        }
        
        stage('Modify Docker Compose') {
            steps {
                sh '''
                # Create a simplified docker-compose file that doesn't rely on env files
                cat > docker-compose-simple.yml << EOL
version: '3.8'
services:
  auth-services:
    build: ./auth-service
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - JWT_SECRET=MICROSERVICE_JWT_SECRET
      - DATABASE_URL=postgresql://postgres:root@authPostgresDB:5432/authDB?schema=public
    depends_on:
      - authPostgresDB
    command: sh -c "npx prisma migrate deploy && npm start"

  authPostgresDB:
    image: postgres:latest
    container_name: authPostgresDB
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: authDB
    ports:
      - "5434:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
  
  product-service:
    build: ./product-service
    container_name: product-service
    ports: 
      - "3002:3002"
    environment:
      - PORT=3002
      - MONGO_URI=mongodb://mongo:27017/microservices
    depends_on:
      - mongo

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db

  order-services:
    build: ./order-service
    container_name: order-services
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - DATABASE_URL=postgresql://postgres:root@orderPostgresDB:5432/orderDB?schema=public
    depends_on:
      - orderPostgresDB
    command: sh -c "npx prisma migrate deploy && npm start"

  orderPostgresDB:
    image: postgres:latest
    container_name: orderPostgresDB
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: orderDB
    ports:
      - "5435:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data

  gateway-services:
    build: ./gateway
    container_name: gateway-service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - AUTH_SERVICE_URL=http://localhost:3001
      - PRODUCT_SERVICE_URL=http://localhost:3002
      - ORDER_SERVICE_URL=http://localhost:3003

  client:
    build: ./client
    container_name: client-service
    ports:
      - "5173:5173"

volumes:
  auth_db_data:
  order_db_data:
  mongo_data:
EOL
                
                # Show the simplified docker-compose file
                cat docker-compose-simple.yml
                '''
            }
        }

        stage('Build & Run Containers') {
            steps {
                sh 'docker-compose -f docker-compose-simple.yml up -d --build'
            }
        }
    }
}